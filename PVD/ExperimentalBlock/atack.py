import cv2
import numpy as np
import matplotlib.pyplot as plt
from PIL import Image
from skimage.metrics import structural_similarity as ssim
import skimage.util
import os


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ PSNR
def calculate_psnr(original, modified):
    if original.shape != modified.shape:
        modified = resize_to_match(original, modified)
    return cv2.PSNR(original, modified)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ SSIM
def calculate_ssim(original, modified):
    if original.shape != modified.shape:
        modified = resize_to_match(original, modified)
    score, _ = ssim(original, modified, full=True)
    return score


# –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ grayscale
def load_image(image_path):
    return np.array(Image.open(image_path).convert("L"))


# –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
def save_image(image_array, filename):
    cv2.imwrite(filename, image_array)
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {filename}")


# –§—É–Ω–∫—Ü–∏—è –ø—Ä–∏–≤–µ–¥–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–≤ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫ –æ—Ä–∏–≥–∏–Ω–∞–ª—É
def resize_to_match(original, modified):
    return cv2.resize(modified, (original.shape[1], original.shape[0]), interpolation=cv2.INTER_LINEAR)


# –§—É–Ω–∫—Ü–∏—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
def plot_histogram(original, modified, title, filename):
    plt.figure(figsize=(8, 4))
    plt.hist(original.ravel(), bins=256, alpha=0.5, label="–û—Ä–∏–≥–∏–Ω–∞–ª", color="blue")
    plt.hist(modified.ravel(), bins=256, alpha=0.5, label="–ò–∑–º–µ–Ω—ë–Ω–Ω–æ–µ", color="red")
    plt.legend()
    plt.title(title)
    plt.xlabel("–ò–Ω—Ç–µ–Ω—Å–∏–≤–Ω–æ—Å—Ç—å –ø–∏–∫—Å–µ–ª–µ–π")
    plt.ylabel("–ß–∞—Å—Ç–æ—Ç–∞")
    plt.savefig(filename)
    plt.close()
    print(f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: {filename}")


# –°–æ–∑–¥–∞—ë–º –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
output_dir = "output"
os.makedirs(output_dir, exist_ok=True)

# üìå –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
original_image = load_image("original.png")
stego_image = load_image("stego_100.png")

# üìå –ü—Ä–∏–º–µ–Ω—è–µ–º –∞—Ç–∞–∫–∏ –∏ —Å—Ç—Ä–æ–∏–º –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
tests = [
    ("JPEG —Å–∂–∞—Ç–∏–µ (–∫–∞—á–µ—Å—Ç–≤–æ 50)", cv2.imread(f"{output_dir}/compressed_50.jpg", cv2.IMREAD_GRAYSCALE), "jpeg_histogram.png"),
    ("–ì–∞—É—Å—Å–æ–≤—Å–∫–∏–π —à—É–º (œÉ=15)", cv2.imread(f"{output_dir}/gaussian_noise.png", cv2.IMREAD_GRAYSCALE), "gaussian_histogram.png"),
    ("Salt & Pepper —à—É–º (0.05)", cv2.imread(f"{output_dir}/salt_pepper_noise.png", cv2.IMREAD_GRAYSCALE), "salt_pepper_histogram.png"),
    ("–†–∞–∑–º—ã—Ç–∏–µ (Gaussian Blur)", cv2.imread(f"{output_dir}/blurred.png", cv2.IMREAD_GRAYSCALE), "blur_histogram.png"),
    ("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ (256x256)", cv2.imread(f"{output_dir}/resized_small.png", cv2.IMREAD_GRAYSCALE), "resize_small_histogram.png"),
    ("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ (1024x1024)", cv2.imread(f"{output_dir}/resized_large.png", cv2.IMREAD_GRAYSCALE), "resize_large_histogram.png"),
    ("–ü–æ–≤—ã—à–µ–Ω–∏–µ –∫–æ–Ω—Ç—Ä–∞—Å—Ç–Ω–æ—Å—Ç–∏", cv2.imread(f"{output_dir}/high_contrast.png", cv2.IMREAD_GRAYSCALE), "contrast_histogram.png")
]

print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:")
for name, mod_img, hist_filename in tests:
    if mod_img is None:
        print(f"‚ö† –û—à–∏–±–∫–∞: {name} –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, –±—ã–ª –ª–∏ —Å–æ—Ö—Ä–∞–Ω—ë–Ω —Ñ–∞–π–ª.")
        continue

    psnr_value = calculate_psnr(stego_image, mod_img)
    ssim_value = calculate_ssim(stego_image, mod_img)
    print(f"{name} ‚Üí PSNR: {psnr_value:.2f} dB, SSIM: {ssim_value:.4f}")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—ã
    plot_histogram(stego_image, mod_img, f"–ì–∏—Å—Ç–æ–≥—Ä–∞–º–º–∞: {name}", f"{output_dir}/{hist_filename}")

print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—Å–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ 'output'.")
